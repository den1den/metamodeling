@namespace(uri="declare", prefix="declare")
@gmf
package declare;

@gmf.diagram
class DeclareModel {
  val Activity[*] activities;
  val Constraint[*] constraints;
  
  val ChoiceTemplate[*] choices;
  val ChoiseLine[*] choiselines;
}

@gmf.node(label="name", figure="figures.MyFigure",
label.icon="false")
class Activity {
  attr String name;
  attr int lowerBoundCardinality;
  attr int upperBoundCardinality;
  ref Undirectional[*] undirected;
  ref Directional[*] directed_to;
  ref Directional[*] directed_from;
  ref ChoiseLine[*] choiseLines;
}

abstract class Constraint {
  attr boolean negated;
}

class Initial extends Activity {
}

class Last extends Activity {
}

@gmf.link(source="activities_source", target="activities_target")
abstract class Directional extends Constraint {
  ref Activity[1] activities_source;
  ref Activity[1] activities_target;
}

@gmf.link(source="activities_source", target="activities_target")
abstract class Undirectional extends Constraint {
  ref Activity[1] activities_source;
  ref Activity[1] activities_target;
}

abstract class Arrowless extends Directional {
}

abstract class Arrowed extends Directional {
  attr int lines;
}

class Response extends Arrowed {
}

class Precedence extends Arrowed {
}

class Succession extends Arrowed {
}

class RespondedExistence extends Arrowless {
}

class CoExistence extends Undirectional {
}

@gmf.node(label="name")
class ChoiceTemplate {
  attr String name;
  attr int min;
  attr int max;
  attr boolean exclusive;
  ref Activity[2..*] activites;
}

@gmf.link(source="choise_template_source", source.decoration="MyDecoration", target="activities_target", incoming="true")
class ChoiseLine {
  ref ChoiceTemplate[1] choise_template_source;
  ref Activity[1] activities_target;
}
