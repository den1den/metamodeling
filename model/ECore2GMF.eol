var ecore_association = ECore!EClass.all.selectOne(c|c.name = "Association");
var activity_label = GmfGraph!Label.all.selectOne(l|l.name="ActivityLabelFigure");

var co_existence_label = new GmfGraph!Label;
//co_existence_label.name = 'RuleNacsCompartmentFigureLabel';
//co_existence_label.text = 'NACs Compartment';
//co_existence.children.add(co_existence_label);

var association = ECore!EClass.all.selectOne(c|c.name = "CoExistence");
association.createLinkEndLabel("dummyLabel", true);

activity_label.makeVertical();

operation ECore!EClass createLinkLabel(attribute:String, text:String){
  var labelName = self.name + "CustomLabel";
  
  // Create the figure descriptor and the label
  var labelFigureDescriptor = 
    createFigureDescriptor(labelName + "Figure");
  var label = new GmfGraph!Label;
  label.name = labelName;
  label.text = text;
  labelFigureDescriptor.actualFigure = label;
  
  // Create the diagram label
  var diagramLabel = new GmfGraph!DiagramLabel;
  diagramLabel.figure = labelFigureDescriptor;
  diagramLabel.name = labelName;
  diagramLabel.elementIcon = false;
  GmfGraph!Canvas.all.first().labels.add(diagramLabel);
  
  // Specify how far the label should be from the line
  var labelOffsetFacet = new GmfGraph!LabelOffsetFacet;
  labelOffsetFacet.x = 5;
  labelOffsetFacet.y = 5;
  diagramLabel.facets.add(labelOffsetFacet);
  
  var featureLabelMapping = new GmfMap!FeatureLabelMapping;
  featureLabelMapping.diagramLabel = diagramLabel;
  
  var linkMapping = GmfMap!LinkMapping.all.
    selectOne(lm|lm.domainMetaElement = self);
    
  linkMapping.labelMappings.add(featureLabelMapping);

  System.out.println("Created linklabel on "+self);
}

operation ECore!EClass createLinkEndLabel(attribute:String, source:Boolean){
  var endName;
  if (source) {
    endName = "Source";
  }
  else {
    endName = "Target";
  }
  
  var labelName = self.name + endName + "Label";
  
  // Create the figure descriptor and the label
  var labelFigureDescriptor = 
    createFigureDescriptor(labelName + "Figure");
  var label = new GmfGraph!Label;
  label.name = labelName;
  label.text = endName;
  labelFigureDescriptor.actualFigure = label;
  
  // Create the diagram label
  var diagramLabel = new GmfGraph!DiagramLabel;
  diagramLabel.figure = labelFigureDescriptor;
  diagramLabel.name = labelName;
  diagramLabel.elementIcon = false;
  GmfGraph!Canvas.all.first().labels.add(diagramLabel);
  
  // Specify if the label will be placed at the beginning/end of the link
  var alignmentFacet =new GmfGraph!AlignmentFacet;
  if (source){
    alignmentFacet.alignment = GmfGraph!Alignment#END;
  }
  else {
    alignmentFacet.alignment = GmfGraph!Alignment#BEGINNING;
  }
  diagramLabel.facets.add(alignmentFacet);
  
  // Specify how far the label should be from the line
  var labelOffsetFacet = new GmfGraph!LabelOffsetFacet;
  labelOffsetFacet.x = 5;
  labelOffsetFacet.y = 5;
  diagramLabel.facets.add(labelOffsetFacet);
  
  // Create the label/attribute mapping in the .gmfmap model
  var featureLabelMapping = new GmfMap!FeatureLabelMapping;
  featureLabelMapping.diagramLabel = diagramLabel;
  
  featureLabelMapping.features.add(self.eAllStructuralFeatures.
    selectOne(sf|sf.name = attribute));
    
  featureLabelMapping.readOnly = false;
  var linkMapping = GmfMap!LinkMapping.all.
    selectOne(lm|lm.domainMetaElement = self);
    
  linkMapping.labelMappings.add(featureLabelMapping);

}

operation createFigureDescriptor(name : String) {
  var figureDescriptor = new GmfGraph!FigureDescriptor;
  figureDescriptor.name = name;
  GmfGraph!FigureGallery.all.first().descriptors.add(figureDescriptor);
  return figureDescriptor;
}

operation GmfGraph!Label makeVertical() {
	var labelFigure = self;
	var labelFigureName = labelFigure.name;
	var labelFigureText = labelFigure.text;
	var figure = labelFigure.eContainer();
	var labelFigureChildAccess = GmfGraph!ChildAccess.all.selectOne(ca|ca.figure = labelFigure);
	delete labelFigure;
	labelFigure = new GmfGraph!VerticalLabel;
	labelFigure.name = labelFigureName;
	labelFigure.text = labelFigureText;
	figure.children.add(0, labelFigure);
	labelFigureChildAccess.figure = labelFigure;
}




//var responsePolyLine = GmfGraph!PolylineConnection.all.selectOne(l|l.name="ResponseFigure");
//responsePolyLine.linewidth=10;

// modify ResponseFigure
//var responsePL = GmfGraph!PolylineConnection.all.selectOne(l|l.name="ResponseFigure");
//responsePL.name="ResponseFigure.old";
//responsePL = new GmfGraph!PolylineConnection;
//responsePL.name="ResponseFigure";
//responsePL.linewidth=10;
//GmfGraph!PolylineConnection.all.add(responsePL);

//for(x in GmfMap!Link.all) {
//	System.out.println("x: " + x);
//}
// FROM MAPPING
//<links>
//    <domainMetaElement
//        href="Combined.ecore#//Response"/>
 //   <containmentFeature
  //      href="Combined.ecore#//DeclareModel/constraints"/>
   // <tool
    //    xsi:type="gmftool:CreationTool"
     //   href="Combined.gmftool#//@palette/@tools.1/@tools.5"/>
//    <diagramLink
 ///       href="Combined.gmfgraph#Response"/>
   // <sourceMetaFeature
    //    xsi:type="ecore:EReference"
     //   href="Combined.ecore#//Directional/activity_from"/>
//    <linkMetaFeature
 ///       xsi:type="ecore:EReference"
   //     href="Combined.ecore#//Directional/activity_to"/>
  //</links>

// Print all Figures
//for (fig in GmfGraph!Figure.all){
//	System.out.println(fig.name + ": " + fig.children.size());
//	for (child in fig.children) {
//		System.out.println(" - " + child.name);
//	}
//}
